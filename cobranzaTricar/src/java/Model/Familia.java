package Model;
// Generated 21/04/2016 10:03:10 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Perfil generated by hbm2java
 */
@Entity
@Table(name = "familia", schema = "dbo", catalog = "cobranzas"
)
public class Familia implements java.io.Serializable {

    private Integer idfamilia;
    private String familia;
    private Date created;
    private Set subfamilias = new HashSet(0);

    public Familia() {
    }

    public Familia(Integer idfamilia) {
        this.idfamilia = idfamilia;
    }

    public Familia(Integer idfamilia, String familia, Date created, Set subfamilias) {
        this.idfamilia = idfamilia;
        this.familia = familia;
        this.created = created;
        this.subfamilias = subfamilias;
    }

    @Id

    @Column(name = "idfamilia", unique = true, nullable = false)
    public Integer getIdfamilia() {
        return this.idfamilia;
    }

    public void setIdfamilia(Integer idfamilia) {
        this.idfamilia = idfamilia;
    }

    @Column(name = "familia", length = 20)
    public String getFamilia() {
        return this.familia;
    }

    public void setFamilia(String familia) {
        this.familia = familia;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created", nullable = false, length = 23)
    public Date getCreated() {
        return this.created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "familia")
    public Set getSubfamilias() {
        return this.subfamilias;
    }

    public void setSubfamilias(Set subfamilias) {
        this.subfamilias = subfamilias;
    }

    @Override
    public boolean equals(Object other) {
        return (other != null && getClass() == other.getClass() && idfamilia != null)
                ? idfamilia.equals(((Familia) other).idfamilia)
                : (other == this);
    }

    @Override
    public int hashCode() {
        return (idfamilia != null)
                ? (getClass().hashCode() + idfamilia.hashCode())
                : super.hashCode();
    }

}
